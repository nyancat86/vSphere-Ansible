---
- set_fact:
    Network: "{{ OverwriteNetwork + AppendNetwork }}"
  delegate_to: localhost

- name: '[ACTION:Hostname] Change hostname'
  changed_when: '"task_succeed" in result.stdout_lines'
  win_command: powershell.exe -
  args:
    stdin: if( ${ENV:COMPUTERNAME} -ne "{{ inventory_hostname }}" ) { Rename-Computer -NewName "{{ inventory_hostname }}" -Force; echo task_succeed }else{ echo OK }
  ignore_errors: yes
  register: result


- name: '[ACTION:Network] Change InterfaceName'
  changed_when: 'item.names.nic_name not in result.stdout_lines'
  ignore_errors: yes
  win_command: powershell.exe -
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Rename-NetAdapter -NewName "{{ item.names.nic_name }}"; Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Select-Object Name
  with_items:
    - "{{ Network }}"
  ignore_errors: yes
- name: '[ACTION:Network] Remove Default Gateway'
  changed_when: '"0.0.0.0" not in result.stdout_lines'
  win_command: powershell.exe -
  args:
    stdin: Remove-NetRoute -DestinationPrefix 0.0.0.0/0 -confirm:$false -ErrorAction SilentlyContinue; Get-NetRoute -AddressFamily IPv4 | Select-Object NextHop
  register: result
  ignore_errors: yes



- name: "[PUSH:ResetInterface] Push files to destination"
  win_template:
    src: nicreset.j2
    dest: C:\nicreset.ps1
    output_encoding: SJIS 
  with_items:
    - "{{ win_nic }}"
- name: '[ACTION:ResetInterface] Start IP config'
  win_shell: C:\nicreset.ps1
  async: 30
  poll: 0
- name: '[ACTION:ResetInterface] Fetch Connection'
  wait_for_connection:
    delay: 5
    timeout: 600
- name: '[CLEANUP:ResetInterface] Fetch Connection'
  win_file:
    path: '{{ item }}'
    state: absent
  with_items:
    - C:\nicreset.ps1
    - C:\nicreset.bat


- name: "[ACTION:DNS] Unset RegisterThisConnectionsAddress"
  win_command: powershell.exe - 
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Set-DnsClient -RegisterThisConnectionsAddress:$False
  ignore_errors: yes
  with_items:
    - '{{ Network }}'
- name: "[ACTION:DNS] Set RegisterThisConnectionsAddress"
  when: '"" != item.interface.gateway'
  win_command: powershell.exe - 
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Set-DnsClient -RegisterThisConnectionsAddress:$True
  ignore_errors: yes
  with_items:
    - '{{ Network }}'
- name: '[ACTION:DNS] Set DNS for target interface'
  win_dns_client:
    adapter_names:  '{{ item.names.nic_name }}'
    ipv4_addresses: '{{ item.dnslist }}'
  with_items:
    - '{{ Network }}'
  ignore_errors: yes


- name: '[ACTION:Network-IPv6]Disable IPv6 ALL Interface'
  changed_when: '"True" not in result.stdout_lines'
  ignore_errors: yes
  win_command: powershell.exe -
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Disable-NetAdapterBinding  -ComponentID ms_tcpip6; Get-NetAdapterBinding -InterfaceDescription "{{ item.names.adapter }}" -ComponentID ms_tcpip6 | Select-Object Enabled
  with_items:
    - "{{ Network }}"
  register: result
- name: '[ACTION:Network-IPv6]Disable IPv6 components'
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters
    name: DisableComponents
    type: dword
    data: 0xff



