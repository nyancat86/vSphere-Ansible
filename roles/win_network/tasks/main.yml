---
- set_fact:
    Network: "{{ BaseNetwork + AppendNetwork }}"
  delegate_to: localhost

- name: '[ACTION:Hostname] Change hostname'
  changed_when: '"task_succeed" in result.stdout_lines'
  win_command: powershell.exe -
  args:
    stdin: if( ${ENV:COMPUTERNAME} -ne "{{ inventory_hostname }}" ) { Rename-Computer -NewName "{{ inventory_hostname }}" -Force; echo task_succeed }else{ echo OK }
  ignore_errors: yes
  register: result


- name: '[ACTION:Network] Change InterfaceName'
  ignore_errors: yes
  win_command: powershell.exe -
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Rename-NetAdapter -NewName "{{ item.names.nic_name }}"
  with_items:
    - "{{ Network }}"
  ignore_errors: yes

- name: '[ACTION:Network] Remove Default Gateway'
  changed_when: '"0.0.0.0" not in result.stdout_lines'
  win_command: powershell.exe -
  args:
    stdin: Remove-NetRoute -DestinationPrefix 0.0.0.0/0 -confirm:$false -ErrorAction SilentlyContinue; Get-NetRoute -AddressFamily IPv4 | Select-Object NextHop
  register: result
  ignore_errors: yes

- name: "[PUSH:ResetInterface] Push files to destination"
  win_template:
    src: nicreset.j2
    dest: C:\nicreset.bat
    output_encoding: SJIS 
  with_items:
    - "{{ Network }}"
- name: '[ACTION:ResetInterface] Start IP config'
  win_shell: C:\nicreset.bat
  async: 30
  poll: 0
- name: '[ACTION:ResetInterface] Fetch Connection'
  wait_for_connection:
    delay: 5
    timeout: 600


- name: "[ACTION:DNS] Unset RegisterThisConnectionsAddress"
  win_command: powershell.exe - 
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Set-DnsClient -RegisterThisConnectionsAddress:$False
  ignore_errors: yes
  with_items:
    - '{{ Network }}'
- name: '[ACTION:DNS] Set DNS for target interface'
  when: 'item not in Network.dnslist'
  win_dns_client:
    adapter_names:  '{{ item.names.nic_name }}'
    ipv4_addresses: '{{ item.dnslist }}'
  with_items:
    - '{{ Network }}'
  ignore_errors: yes

- name: '[ACTION:Network-IPv6]Disable IPv6 ALL Interface'
  changed_when: '"True" not in result.stdout_lines'
  ignore_errors: yes
  win_command: powershell.exe -
  args:
    stdin: Get-NetAdapter -InterfaceDescription "{{ item.names.adapter }}" | Disable-NetAdapterBinding  -ComponentID ms_tcpip6; Get-NetAdapterBinding -InterfaceDescription "{{ item.names.adapter }}" -ComponentID ms_tcpip6 | Select-Object Enabled
  with_items:
    - "{{ Network }}"
  register: result
- name: '[ACTION:Network-IPv6]Disable IPv6 components'
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters
    name: DisableComponents
    type: dword
    data: 0xff




# - name: "[Gateway] Set Default Gateway"
#   win_command: powershell.exe -
#   args:
#     stdin: Get-NetAdapter -InterfaceDescription "{{ Network[0].names.adapter }}" | Remove-NetRoute -DestinationPrefix 0.0.0.0/0 -confirm:$false; Get-NetAdapter -InterfaceDescription "{{ Network[0].names.adapter }}" | Remove-NetIPAddress -confirm:$false; Get-NetAdapter -InterfaceDescription "{{ Network[0].names.adapter }}" | New-NetIPAddress -AddressFamily IPv4 -IPAddress '{{ ansible_host }}' -prefix 25 -DefaultGateway 10.40.3.120
#   ignore_errors: yes
#   async: 15
#   poll: 0

# - name: Wait for 10min
#   wait_for_connection:
#     delay: 5
#     timeout: 600


# - win_reboot: